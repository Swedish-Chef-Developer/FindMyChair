@using FindMyChair.Models.Meetings;
@using FindMyChair.Web.ViewModels.Meetings;
@using System;
@using System.Globalization;
@using FindMyChair.Types;
@using FindMyChair.Client;
@using FindMyChair.Utilities;
@model MeetingListViewModel
@{
	var timeCounter = 0;
	var scraperUtility = new ScraperUtilities();
	var aaClient = new AAClient();
	var today = aaClient.GetCurrentDay();
	var rowCounter = 0;
	var textUtility = new TextUtility();
}
@if (null != Model)
{
	<section class="inner-content" id="list-content">
		@if (!string.IsNullOrWhiteSpace(Model.Title))
		{
			<div class="heading">
				<h3>@Model.Title</h3>
			</div>
		}
		@foreach (var meeting in Model.MeetingsList.ToList())
		{
			var counter = 0;
			<div class="meeting-wrapper">
				<h3>
					@meeting.GroupName
					@if (null != meeting.Address.Districts && meeting.Address.Districts.Any())
					{
						foreach (var district in meeting.Address.Districts)
						{
							if (null == district.DistrictName || string.IsNullOrWhiteSpace(district.DistrictName.Trim())) { continue; }
							if (counter > 0)
							{
								@Html.Raw(",&nbsp;");
							}
							else
							{
								@Html.Raw("&nbsp;-&nbsp;");
							}
							<span class="meeting-seperator" name='@string.Format("{0}_{1}", meeting.Id, district.Id)¨'>@district.DistrictName.Trim()</span>
							counter++;
						}
					}
				</h3>
				<div class="meeting-info-wrapper">
					<div class="meeting-info">
						@if (meeting.HandicapFriendly)
						{
							<span class="circle handicap-friendly"></span>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.Address.LocationLink) &&
							(!string.IsNullOrWhiteSpace(meeting.Address.Street) ||
							!string.IsNullOrWhiteSpace(meeting.Address.City)) ||
							!string.IsNullOrWhiteSpace(meeting.Address.FullAddress))
						{
							<div>
								<div class="location-icon"></div>
								<span class="meeting-title">Besöksadress:</span>
								<span clas="meeting-address">
									<a href="@meeting.Address.LocationLink" title="@meeting.GroupName" class="meeting-address-link-location" target="=_blank">
										@if (!string.IsNullOrWhiteSpace(meeting.Address.Street) && !string.IsNullOrWhiteSpace(meeting.Address.City))
										{
											<span>@string.Format("{0}, {1}", meeting.Address.Street, meeting.Address.City)</span>
										}
										else if (!string.IsNullOrWhiteSpace(meeting.Address.FullAddress))
										{
											<span>@meeting.Address.FullAddress</span>
										}
										else
										{
											<span>@string.Format("{0}{1}", meeting.Address.Street, meeting.Address.City)</span>
										}
									</a>
								</span>
							</div>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.Place))
						{
							<div>
								<span clas="meeting-place">
									<span>@meeting.Place</span>
								</span>
							</div>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.Email))
						{
							<div>
								<span class="meeting-title">E-post:</span>
								<span clas="meeting-email">
									<a href="@meeting.Email" title="@meeting.GroupName" class="meeting-address-link-email">
										<span>@meeting.Email</span>
									</a>
								</span>
							</div>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.Phone))
						{
							<div>
								<span class="meeting-title">Telefon:</span>
								<span clas="meeting-phone">
									<span>@meeting.Phone</span>
								</span>
							</div>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.GroupLink))
						{
							<div>
								<span class="meeting-title">Länk:</span>
								<span clas="meeting-link">
									<a href="@meeting.GroupLink" title="@meeting.GroupName" class="meeting-address-link-location" target="=_blank">
										<span>@meeting.GroupLink</span>
									</a>
								</span>
							</div>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.OnlineLink))
						{
							<div>
								<span class="meeting-title">Online länk:</span>
								<span clas="meeting-link">
									<a href="@meeting.OnlineLink" title="@meeting.GroupName" class="meeting-address-link-location" target="=_blank">
										<span>@meeting.OnlineLink</span>
									</a>
								</span>
							</div>
						}
						@if (!string.IsNullOrWhiteSpace(meeting.Note))
						{
							<div>
								<span class="meeting-note">
									<span>@Html.Raw(meeting.Note)</span>
								</span>
							</div>
						}
					</div>
					<div class="meeting-additional-info-wrapper">
						@if (null != meeting.AdditionalInfo && meeting.AdditionalInfo.Any())
						{
							<div class="meeting-additional-information-expand" data-toggle="collapse"
								 href="#additionalInformation_@meeting.Id"
								 role="button"
								 aria-expanded="false"
								 aria-controls="additionalInformation_@meeting.Id"><span class="expand"></span><span class="expand-text">Mer Information</span></div>
							<div class="meeting-additional-info collapse multi-collapse" id="additionalInformation_@meeting.Id">
								@foreach (var infoHtml in meeting.AdditionalInfo)
								{
									if (!infoHtml.Trim().ToLower().StartsWith("<a"))
									{
										<span>@Html.Raw(infoHtml)</span>
									}
								}
							</div>
						}
						@if (null != meeting.AdditionalInformationHtmlString
							&& !string.IsNullOrWhiteSpace(meeting.AdditionalInformationHtmlString)
							&& null == meeting.AdditionalInfo)
						{
							<div class="meeting-additional-information-expand" data-toggle="collapse"
								 href="#additionalInformation_@meeting.Id"
								 role="button"
								 aria-expanded="false"
								 aria-controls="additionalInformation_@meeting.Id"><span class="expand"></span><span class="expand-text">Mer Information</span></div>
							<div class="meeting-additional-info collapse multi-collapse" id="additionalInformation_@meeting.Id">
								<span>@Html.Raw(meeting.AdditionalInformationHtmlString)</span>
							</div>
						}
					</div>
				</div>
				<div class="meeting-schedule-wrapper">
					@if (null != meeting.DayAndTime && meeting.DayAndTime.Any())
					{
						timeCounter = 0;
						<div class="headline">
							<h4 class="schedule-title">Ordinarie AA-möten</h4>
							<div class="flags">
								<span class="flag flag-@meeting.Language"></span>
							</div>
						</div>
						<table class="meeting-table">
							<thead>
								<tr>
									@for (var d = 0; d < 7; d++)
									{
										var dayTimeList = meeting.DayAndTime.ToList();
										var dayName = Enum.GetName(typeof(WeekdayNamesSV), dayTimeList[d].MeetingDay);
										<th>
											@dayName
										</th>
									}
								</tr>
							</thead>
							<tbody>
								@{var dateTimeList = meeting.DayAndTime.ToList(); }
								@for (var i = 0; i < dateTimeList.Count; i++)
								{
									if (i % 7 == 0)
									{
										@Html.Raw("<tr>");
									}
									var dateTime = new DateTime(Math.Abs(dateTimeList[i].StartTime.Ticks));
									var formattedTime = textUtility.FormatTimeSpan(dateTimeList[i].StartTime);
									var todayClass = string.Empty;
									if (dateTime.Ticks > 0)
									{
										if (dateTimeList[i].MeetingDay == today
													&& dateTime.Ticks > DateTime.Now.TimeOfDay.Ticks)
										{
											todayClass = "meeting-today";
										}
									}
									<td@(timeCounter > 0 && dateTime.Ticks > 0 ? Html.Raw(" class='additional-time'") : Html.Raw("")) style="background-color: @scraperUtility.GetMeetingTypesColorAA(dateTimeList[i].MeetingType)">
										@if (dateTime.Ticks > 0)
										{
											<span class="meeting-table-time @todayClass">@formattedTime</span>
										}
										else
										{
											<span class="meeting-table-time">&nbsp;</span>
										}
										</td>
										formattedTime = string.Empty;
										if (i != 0 && i % 7 == 6)
										{
											@Html.Raw("</tr>");
											rowCounter++;
										}
										timeCounter++;
									}
						</tbody>
					</table>
				}
				</div>
			</div>
		}
	</section>
}
